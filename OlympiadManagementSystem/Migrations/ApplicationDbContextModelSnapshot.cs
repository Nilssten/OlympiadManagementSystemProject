// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OlympiadManagement.Infrastructure;

namespace OlympiadManagementSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EvaluatorOlympiad", b =>
                {
                    b.Property<Guid>("EvaluatorsEvaluatorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OlympiadsOlympiadID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EvaluatorsEvaluatorID", "OlympiadsOlympiadID");

                    b.HasIndex("OlympiadsOlympiadID");

                    b.ToTable("EvaluatorOlympiad");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OlympiadManagement.Core.Aggregates.EducationAggregate.School", b =>
                {
                    b.Property<Guid>("SchoolID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SchoolID");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("OlympiadManagement.Core.Aggregates.OlympiadAggregate.Archive", b =>
                {
                    b.Property<Guid>("ArchiveID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OlympiadID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ArchiveID");

                    b.HasIndex("OlympiadID");

                    b.ToTable("Archives");
                });

            modelBuilder.Entity("OlympiadManagement.Core.Aggregates.UserProfileAggregate.Admin", b =>
                {
                    b.Property<Guid>("AdminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProfileUserProfileID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AdminID");

                    b.HasIndex("ProfileUserProfileID");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("OlympiadManagement.Core.Aggregates.UserProfileAggregate.Applicant", b =>
                {
                    b.Property<Guid>("ApplicantID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Education")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProfileID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SchoolID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicantID");

                    b.HasIndex("ProfileID");

                    b.HasIndex("SchoolID");

                    b.ToTable("Applicants");
                });

            modelBuilder.Entity("OlympiadManagement.Core.Aggregates.UserProfileAggregate.Evaluator", b =>
                {
                    b.Property<Guid>("EvaluatorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Education")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProfileID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EvaluatorID");

                    b.HasIndex("ProfileID");

                    b.ToTable("Evaluators");
                });

            modelBuilder.Entity("OlympiadManagement.Core.Aggregates.UserProfileAggregate.Organizer", b =>
                {
                    b.Property<Guid>("OrganizerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProfileID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrganizerID");

                    b.HasIndex("ProfileID");

                    b.ToTable("Organizers");
                });

            modelBuilder.Entity("OlympiadManagement.Core.Aggregates.UserProfileAggregate.Participant", b =>
                {
                    b.Property<Guid>("ParticipantID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProfileID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SchoolID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ParticipantID");

                    b.HasIndex("ApplicantID");

                    b.HasIndex("ProfileID");

                    b.HasIndex("SchoolID");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("OlympiadManagement.Core.Aggregates.UserProfileAggregate.UserProfile", b =>
                {
                    b.Property<Guid>("UserProfileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.HasKey("UserProfileID");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("OlympiadManagement.Core.Olympiad", b =>
                {
                    b.Property<Guid>("OlympiadID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OrganizerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OlympiadID");

                    b.HasIndex("OrganizerID");

                    b.ToTable("Olympiads");
                });

            modelBuilder.Entity("OlympiadManagement.Core.OlympiadResult", b =>
                {
                    b.Property<Guid>("OlympiadResultID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ArchiveID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EvaluatorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OlympiadID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParticipantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Place")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("OlympiadResultID");

                    b.HasIndex("ArchiveID");

                    b.HasIndex("OlympiadID");

                    b.ToTable("OlympiadResults");
                });

            modelBuilder.Entity("OlympiadManagement.Infrastructure.IdentityModels.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("OlympiadManagement.Infrastructure.IdentityModels.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("OlympiadParticipant", b =>
                {
                    b.Property<Guid>("OlympiadsOlympiadID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParticipantsParticipantID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OlympiadsOlympiadID", "ParticipantsParticipantID");

                    b.HasIndex("ParticipantsParticipantID");

                    b.ToTable("OlympiadParticipant");
                });

            modelBuilder.Entity("OlympiadResultParticipant", b =>
                {
                    b.Property<Guid>("OlympiadResultsOlympiadResultID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParticipantID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OlympiadResultsOlympiadResultID", "ParticipantID");

                    b.HasIndex("ParticipantID");

                    b.ToTable("OlympiadResultParticipant");
                });

            modelBuilder.Entity("EvaluatorOlympiad", b =>
                {
                    b.HasOne("OlympiadManagement.Core.Aggregates.UserProfileAggregate.Evaluator", null)
                        .WithMany()
                        .HasForeignKey("EvaluatorsEvaluatorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OlympiadManagement.Core.Olympiad", null)
                        .WithMany()
                        .HasForeignKey("OlympiadsOlympiadID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("OlympiadManagement.Infrastructure.IdentityModels.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("OlympiadManagement.Infrastructure.IdentityModels.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("OlympiadManagement.Infrastructure.IdentityModels.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("OlympiadManagement.Infrastructure.IdentityModels.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OlympiadManagement.Infrastructure.IdentityModels.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("OlympiadManagement.Infrastructure.IdentityModels.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OlympiadManagement.Core.Aggregates.OlympiadAggregate.Archive", b =>
                {
                    b.HasOne("OlympiadManagement.Core.Olympiad", "Olympiad")
                        .WithMany()
                        .HasForeignKey("OlympiadID");

                    b.Navigation("Olympiad");
                });

            modelBuilder.Entity("OlympiadManagement.Core.Aggregates.UserProfileAggregate.Admin", b =>
                {
                    b.HasOne("OlympiadManagement.Core.Aggregates.UserProfileAggregate.UserProfile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileUserProfileID");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("OlympiadManagement.Core.Aggregates.UserProfileAggregate.Applicant", b =>
                {
                    b.HasOne("OlympiadManagement.Core.Aggregates.UserProfileAggregate.UserProfile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OlympiadManagement.Core.Aggregates.EducationAggregate.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolID");

                    b.Navigation("Profile");

                    b.Navigation("School");
                });

            modelBuilder.Entity("OlympiadManagement.Core.Aggregates.UserProfileAggregate.Evaluator", b =>
                {
                    b.HasOne("OlympiadManagement.Core.Aggregates.UserProfileAggregate.UserProfile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("OlympiadManagement.Core.Aggregates.UserProfileAggregate.Organizer", b =>
                {
                    b.HasOne("OlympiadManagement.Core.Aggregates.UserProfileAggregate.UserProfile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("OlympiadManagement.Core.Aggregates.UserProfileAggregate.Participant", b =>
                {
                    b.HasOne("OlympiadManagement.Core.Aggregates.UserProfileAggregate.Applicant", null)
                        .WithMany("Participants")
                        .HasForeignKey("ApplicantID");

                    b.HasOne("OlympiadManagement.Core.Aggregates.UserProfileAggregate.UserProfile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OlympiadManagement.Core.Aggregates.EducationAggregate.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("School");
                });

            modelBuilder.Entity("OlympiadManagement.Core.Aggregates.UserProfileAggregate.UserProfile", b =>
                {
                    b.OwnsOne("OlympiadManagement.Core.Aggregates.UserProfileAggregate.BasicInfo", "BasicInfo", b1 =>
                        {
                            b1.Property<Guid>("UserProfileID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Adress")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("DateOfBirth")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Email")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FirstName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Gender")
                                .HasColumnType("int");

                            b1.Property<string>("LastName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("PersonalCode")
                                .HasColumnType("int");

                            b1.Property<string>("PhoneNumber")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserProfileID");

                            b1.ToTable("UserProfiles");

                            b1.WithOwner()
                                .HasForeignKey("UserProfileID");
                        });

                    b.Navigation("BasicInfo");
                });

            modelBuilder.Entity("OlympiadManagement.Core.Olympiad", b =>
                {
                    b.HasOne("OlympiadManagement.Core.Aggregates.UserProfileAggregate.Organizer", null)
                        .WithMany("Olympiads")
                        .HasForeignKey("OrganizerID");

                    b.OwnsOne("OlympiadManagement.Core.OlympiadRules", "Rules", b1 =>
                        {
                            b1.Property<Guid>("OlympiadID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("MaxParticipant")
                                .HasColumnType("int");

                            b1.Property<int>("MaxParticipantFromApplicant")
                                .HasColumnType("int");

                            b1.Property<int>("MinParticipant")
                                .HasColumnType("int");

                            b1.HasKey("OlympiadID");

                            b1.ToTable("Olympiads");

                            b1.WithOwner()
                                .HasForeignKey("OlympiadID");
                        });

                    b.Navigation("Rules");
                });

            modelBuilder.Entity("OlympiadManagement.Core.OlympiadResult", b =>
                {
                    b.HasOne("OlympiadManagement.Core.Aggregates.OlympiadAggregate.Archive", null)
                        .WithMany("OlympiadResults")
                        .HasForeignKey("ArchiveID");

                    b.HasOne("OlympiadManagement.Core.Olympiad", "Olympiad")
                        .WithMany()
                        .HasForeignKey("OlympiadID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Olympiad");
                });

            modelBuilder.Entity("OlympiadParticipant", b =>
                {
                    b.HasOne("OlympiadManagement.Core.Olympiad", null)
                        .WithMany()
                        .HasForeignKey("OlympiadsOlympiadID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OlympiadManagement.Core.Aggregates.UserProfileAggregate.Participant", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsParticipantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OlympiadResultParticipant", b =>
                {
                    b.HasOne("OlympiadManagement.Core.OlympiadResult", null)
                        .WithMany()
                        .HasForeignKey("OlympiadResultsOlympiadResultID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OlympiadManagement.Core.Aggregates.UserProfileAggregate.Participant", null)
                        .WithMany()
                        .HasForeignKey("ParticipantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OlympiadManagement.Core.Aggregates.OlympiadAggregate.Archive", b =>
                {
                    b.Navigation("OlympiadResults");
                });

            modelBuilder.Entity("OlympiadManagement.Core.Aggregates.UserProfileAggregate.Applicant", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("OlympiadManagement.Core.Aggregates.UserProfileAggregate.Organizer", b =>
                {
                    b.Navigation("Olympiads");
                });
#pragma warning restore 612, 618
        }
    }
}
