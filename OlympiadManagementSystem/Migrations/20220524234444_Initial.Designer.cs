// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OlympiadManagement.Infrastructure;

namespace OlympiadManagementSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220524234444_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("OlympiadManagement.Core.Aggregates.EducationAggregates.School", b =>
                {
                    b.Property<Guid>("SchoolID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SchoolID");

                    b.ToTable("School");
                });

            modelBuilder.Entity("OlympiadManagement.Core.Aggregates.UserProfileAggregates.Applicant", b =>
                {
                    b.Property<Guid>("ApplicantID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Education")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProfileID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SchoolID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicantID");

                    b.HasIndex("ProfileID");

                    b.HasIndex("SchoolID");

                    b.ToTable("Applicants");
                });

            modelBuilder.Entity("OlympiadManagement.Core.Aggregates.UserProfileAggregates.Evaluator", b =>
                {
                    b.Property<Guid>("EvaluatorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Education")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OlympiadID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProfileID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EvaluatorID");

                    b.HasIndex("OlympiadID");

                    b.HasIndex("ProfileID");

                    b.ToTable("Evaluator");
                });

            modelBuilder.Entity("OlympiadManagement.Core.Aggregates.UserProfileAggregates.Participant", b =>
                {
                    b.Property<Guid>("ParticipantID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OlympiadID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProfileID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SchoolID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ParticipantID");

                    b.HasIndex("ApplicantID");

                    b.HasIndex("OlympiadID");

                    b.HasIndex("ProfileID");

                    b.HasIndex("SchoolID");

                    b.ToTable("Participant");
                });

            modelBuilder.Entity("OlympiadManagement.Core.Aggregates.UserProfileAggregates.UserProfile", b =>
                {
                    b.Property<Guid>("UserProfileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Identity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.HasKey("UserProfileID");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("OlympiadManagement.Core.Olympiad", b =>
                {
                    b.Property<Guid>("OlympiadID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OlympiadID");

                    b.ToTable("Olympiads");
                });

            modelBuilder.Entity("OlympiadManagement.Core.OlympiadResult", b =>
                {
                    b.Property<Guid>("OlympiadResultID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EvaluatorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OlympiadID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParticipantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Place")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("OlympiadResultID");

                    b.HasIndex("OlympiadID");

                    b.ToTable("OlympiadResults");
                });

            modelBuilder.Entity("OlympiadResultParticipant", b =>
                {
                    b.Property<Guid>("OlympiadResultsOlympiadResultID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParticipantID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OlympiadResultsOlympiadResultID", "ParticipantID");

                    b.HasIndex("ParticipantID");

                    b.ToTable("OlympiadResultParticipant");
                });

            modelBuilder.Entity("OlympiadManagement.Core.Aggregates.UserProfileAggregates.Applicant", b =>
                {
                    b.HasOne("OlympiadManagement.Core.Aggregates.UserProfileAggregates.UserProfile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OlympiadManagement.Core.Aggregates.EducationAggregates.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolID");

                    b.Navigation("Profile");

                    b.Navigation("School");
                });

            modelBuilder.Entity("OlympiadManagement.Core.Aggregates.UserProfileAggregates.Evaluator", b =>
                {
                    b.HasOne("OlympiadManagement.Core.Olympiad", null)
                        .WithMany("Evaluators")
                        .HasForeignKey("OlympiadID");

                    b.HasOne("OlympiadManagement.Core.Aggregates.UserProfileAggregates.UserProfile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("OlympiadManagement.Core.Aggregates.UserProfileAggregates.Participant", b =>
                {
                    b.HasOne("OlympiadManagement.Core.Aggregates.UserProfileAggregates.Applicant", null)
                        .WithMany("Participants")
                        .HasForeignKey("ApplicantID");

                    b.HasOne("OlympiadManagement.Core.Olympiad", null)
                        .WithMany("Participants")
                        .HasForeignKey("OlympiadID");

                    b.HasOne("OlympiadManagement.Core.Aggregates.UserProfileAggregates.UserProfile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OlympiadManagement.Core.Aggregates.EducationAggregates.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("School");
                });

            modelBuilder.Entity("OlympiadManagement.Core.Aggregates.UserProfileAggregates.UserProfile", b =>
                {
                    b.OwnsOne("OlympiadManagement.Core.Aggregates.UserProfileAggregates.BasicInfo", "BasicInfo", b1 =>
                        {
                            b1.Property<Guid>("UserProfileID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Adress")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("DateOfBirth")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Email")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FirstName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Gender")
                                .HasColumnType("int");

                            b1.Property<string>("LastName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("PersonalCode")
                                .HasColumnType("int");

                            b1.Property<string>("PhoneNumber")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserProfileID");

                            b1.ToTable("UserProfiles");

                            b1.WithOwner()
                                .HasForeignKey("UserProfileID");
                        });

                    b.Navigation("BasicInfo");
                });

            modelBuilder.Entity("OlympiadManagement.Core.Olympiad", b =>
                {
                    b.OwnsOne("OlympiadManagement.Core.OlympiadRules", "Rules", b1 =>
                        {
                            b1.Property<Guid>("OlympiadID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("MaxParticipant")
                                .HasColumnType("int");

                            b1.Property<int>("MaxParticipantFromApplicant")
                                .HasColumnType("int");

                            b1.Property<int>("MinParticipant")
                                .HasColumnType("int");

                            b1.HasKey("OlympiadID");

                            b1.ToTable("Olympiads");

                            b1.WithOwner()
                                .HasForeignKey("OlympiadID");
                        });

                    b.Navigation("Rules");
                });

            modelBuilder.Entity("OlympiadManagement.Core.OlympiadResult", b =>
                {
                    b.HasOne("OlympiadManagement.Core.Olympiad", "Olympiad")
                        .WithMany()
                        .HasForeignKey("OlympiadID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Olympiad");
                });

            modelBuilder.Entity("OlympiadResultParticipant", b =>
                {
                    b.HasOne("OlympiadManagement.Core.OlympiadResult", null)
                        .WithMany()
                        .HasForeignKey("OlympiadResultsOlympiadResultID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OlympiadManagement.Core.Aggregates.UserProfileAggregates.Participant", null)
                        .WithMany()
                        .HasForeignKey("ParticipantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OlympiadManagement.Core.Aggregates.UserProfileAggregates.Applicant", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("OlympiadManagement.Core.Olympiad", b =>
                {
                    b.Navigation("Evaluators");

                    b.Navigation("Participants");
                });
#pragma warning restore 612, 618
        }
    }
}
